@model ChatViewModel

<div class="chat-container">
    <div class="card h-100">
        <div class="card-header">
            <h5 class="mb-0 text-white">ChatMVC</h5>
        </div>
        <div class="card-body" id="chatMessages">
            @if (Model.Messages != null && Model.Messages.Any())
            {
                foreach (var message in Model.Messages)
                {
                    <div class="chat-message @(message.Role == "user" ? "user" : "assistant")">
                        <div class="message-content">
                            @message.Content
                        </div>
                    </div>
                }
            }
            <div class="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        <div class="card-footer">
            <form id="chatForm">
                <input type="hidden" id="messages" name="messages" value="@Json.Serialize(Model.Messages)" />
                <div class="input-group">
                    <input type="text" class="form-control" id="newMessage" name="newMessage" placeholder="Escribe tu mensaje..." autocomplete="off">
                    <button type="submit" class="btn btn-primary">Enviar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Function to scroll to the end of the chat
            function scrollToBottom() {
                var chatMessages = document.getElementById('chatMessages');
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Initial scroll
            scrollToBottom();

            // Handle form submission
            $('#chatForm').on('submit', function(e) {
                e.preventDefault();
                
                var form = $(this);
                var messageInput = form.find('#newMessage');
                var message = messageInput.val().trim();
                
                if (message) {
                    // Display the user's message immediately
                    var userMessageHtml = `
                        <div class="chat-message user">
                            <div class="message-content">
                                ${message}
                            </div>
                        </div>
                    `;
                    $('#chatMessages').append(userMessageHtml);

                    // Show writing indicator
                    $('.typing-indicator').show();
                    scrollToBottom();

                    // Prepare the data for sending
                    var messages = [];
                    $('.chat-message').each(function() {
                        var role = $(this).hasClass('user') ? 'user' : 'assistant';
                        var content = $(this).find('.message-content').text();
                        messages.push({ role: role, content: content });
                    });

                    // Submit the form
                    $.ajax({
                        url: '@Url.Action("SendMessage", "Home")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            newMessage: message,
                            messages: messages
                        }),
                        success: function(response) {
                            // Hide typing indicator
                            $('.typing-indicator').hide();

                            // Create element for the response
                            var responseElement = $('<div class="chat-message assistant"><div class="message-content"></div></div>');
                            $('#chatMessages').append(responseElement);

                            // Using Typed.js for the typing effect
                            var typed = new Typed(responseElement.find('.message-content')[0], {
                                strings: [response],
                                typeSpeed: 30,
                                showCursor: false,
                                onComplete: function() {
                                    scrollToBottom();
                                }
                            });

                            // Clear the input
                            messageInput.val('');
                        },
                        error: function() {
                            $('.typing-indicator').hide();
                            $('#chatMessages').append(`
                                <div class="chat-message assistant">
                                    <div class="message-content">
                                        Lo siento, hubo un error al procesar tu mensaje.
                                    </div>
                                </div>
                            `);
                            scrollToBottom();
                        }
                    });
                }
            });

            // Handling the Enter key
            $('#newMessage').on('keypress', function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $('#chatForm').submit();
                }
            });
        });
    </script>
}
